#! /usr/bin/env python3

from pathlib import Path
import os, sys, shutil, distutils

from fire import Fire
import toml

import format_lean
from format_lean.line_reader import FileReader
from format_lean.renderer import Renderer
from format_lean.objects import (HeaderBegin, HeaderEnd, SectionBegin,
    SectionEnd, SubSectionBegin, SubSectionEnd, TextBegin, TextEnd,
    DefinitionBegin, DefinitionEnd, 
    ExampleBegin, ExampleEnd,
    LemmaBegin, LemmaEnd,
    TheoremBegin, TheoremEnd,
    ProofBegin, ProofEnd,
    ProofComment)

module_path = Path(format_lean.__file__).parent

def render_lean_project(outdir=None, templates=None, css='',
        debug=False):
    try:
        leanpkg_toml = toml.load('leanpkg.toml')
    except FileNotFoundError:
        print("Couldn't find a leanpkg.toml, I give up.")
        sys.exit(1)
    toolchain = leanpkg_toml['package']['lean_version']
    lean_exec_path = Path.home() / '.elan/toolchains' / toolchain / 'bin/lean'
    paths = [str(lean_exec_path.parent / '../lib/lean/library'),
             str(Path.cwd() / 'src')]

    for dep, dep_info in leanpkg_toml.get('dependencies', []).items():
        if 'git' in dep_info:
            paths.append(str(Path('_target/deps') / dep / 'src'))
        else:
            paths.append(dep_info['path'])
    lean_path = ':'.join(paths)
    if debug:
        print(lean_exec_path, lean_path)

    try:
        format_toml = toml.load('format.toml')
    except:
        format_toml = dict()

    templates = templates or (format_toml.get('templates') or 
                              str(module_path / 'templates/'))
    if debug:
        print(templates)

    excludes = format_toml.get('exclude', [])
    
    try:
        lang = toml.load('format_lang.toml')
    except:
        lang = dict()

    outdir = outdir or 'html'
    if not Path(outdir).is_dir():
        os.makedirs(outdir)

    css = css or format_toml.get('css', 'lecture.css')
    for path in module_path.glob('*.css'):
        shutil.copy(path, outdir)
    for path in module_path.glob('*.css.map'):
        shutil.copy(path, outdir)

    if 'js' in format_toml:
        jss = format_toml['js'] 
        for path in jss:
            shutil.copy(path, outdir)
        shutil.copy(module_path /'jquery.min.js', outdir)
        jss = ['jquery.min.js'] + jss
    else:
        jss = []
        for path in module_path.glob('*.js'):
            jss.append(path.name)
            shutil.copy(path, outdir)


    lecture_reader = FileReader(lean_exec_path, lean_path, 
            [HeaderBegin, HeaderEnd,
             SectionBegin, SectionEnd, 
             SubSectionBegin, SubSectionEnd,
             TextBegin, TextEnd, 
             DefinitionBegin, DefinitionEnd,
             ExampleBegin, ExampleEnd,
             LemmaBegin, LemmaEnd,
             TheoremBegin, TheoremEnd,
             ProofBegin, ProofEnd, ProofComment])
    renderer = Renderer.from_file(templates)
    
    for lean_file in Path('src').glob('**/*.lean'):
        if str(lean_file.relative_to('src')) in excludes:
            print('Excluding ' + str(lean_file))
            continue
        print('Rendering ' + str(lean_file))
        tgt_dir = Path(outdir) / lean_file.relative_to('src').parent
        tgt_dir.mkdir(parents=True, exist_ok=True)
        outpath = str(Path(outdir) / lean_file.relative_to('src')).replace('.lean', '.html')
        try:
            lecture_reader.read_file(str(lean_file))
        except LeanError as ex:
            print(ex)
            continue
        depth = len(lean_file.relative_to('src').parts) - 1
        prefix = depth*'../'

        pc = { 'csss': [prefix + css, prefix + 'colorful.css'],
               'jss': [prefix + js  for js in jss],
               'title': lean_file.name.replace('.lean', ''),
               'lang': lang}
        renderer.render(lecture_reader.output, outpath, page_context=pc)
        lecture_reader.hard_reset()

if __name__ == '__main__':
    Fire(render_lean_project)
